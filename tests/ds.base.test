<?php
// $Id$

/**
 * @file
 * Base functions and tests for Display Suite.
 */

class dsBaseTest extends DrupalWebTestCase {

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('ds', 'ds_extras', 'ds_search');
    $this->admin_user = $this->drupalCreateUser(array('admin_view_modes', 'admin_fields', 'admin_display_suite', 'ds_switch article', 'use text format ds_code', 'access administration pages', 'administer content types', 'administer users', 'administer comments'));
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Select a layout.
   */
  function dsSelectLayout($edit = array(), $assert = array(), $url = 'admin/structure/types/manage/article/display') {

    $edit += array(
      'display_suite[layout]' => 'ds_2col_stacked',
    );

    $this->drupalPost($url, $edit, t('Save'));

    $assert += array(
      'regions' => array(
        'header' => '<td colspan="8">' . t('Header') . '</td>',
        'left' => '<td colspan="8">' . t('Left') . '</td>',
        'right' => '<td colspan="8">' . t('Right') . '</td>',
        'footer' => '<td colspan="8">' . t('Footer') . '</td>',
      ),
    );

    foreach ($assert['regions'] as $region => $raw) {
      $this->assertRaw($region, t('Region !region found', array('!region' => $region)));
    }
  }

  /**
   * Configure styles
   */
  function dsConfigureStyles($edit = array()) {

    $edit += array(
      'ds_styles_regions' => "class_name_1\nclass_name_2|Friendly name"
    );

    $this->drupalPost('admin/structure/ds/styles', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), t('Styles configuration saved'));
    $this->assertRaw('class_name_1', 'Class name 1 found');
    $this->assertRaw('class_name_2', 'Class name 1 found');
  }

  /**
   * Configure classes on a layout.
   */
  function dsSelectClasses($edit = array(), $url = 'admin/structure/types/manage/article/display') {

    $edit += array(
      "display_suite[header][]" => 'class_name_1',
      "display_suite[footer][]" => 'class_name_2',
    );

    $this->drupalPost($url, $edit, t('Save'));
  }

  /**
   * Configure fields on a layout.
   */
  function dsConfigureFields($edit, $url = 'admin/structure/types/manage/article/display') {
    $this->drupalPost($url, $edit, t('Save'));
  }

  /**
   * Create a view mode.
   *
   * @param $edit
   *   An optional array of view mode properties.
   */
  function dsCreateViewMode($edit = array()) {

    $edit += array(
      'name' => 'Testing',
      'view_mode' => 'testing',
      'entities[node]' => '1'
    );

    $this->drupalPost('admin/structure/ds/view_modes/manage', $edit, t('Save'));
    $this->assertText(t('The view mode '. $edit['name'] .' has been saved'), t('!name view mode has been saved', array('!name' => $edit['name'])));
  }

  /**
   * Create a code field.
   *
   * @param $edit
   *   An optional array of field properties.
   */
  function dsCreateCodeField($edit = array()) {

    $edit += array(
      'name' => 'Test field',
      'field' => 'test_field',
      'entities[node]' => '1',
      'code[value]' => 'Test field',
      'use_token' => '0',
    );

    $this->drupalPost('admin/structure/ds/fields/manage_custom', $edit, t('Save'));
    $this->assertText(t('The field '. $edit['name'] .' has been saved'), t('!name field has been saved', array('!name' => $edit['name'])));
  }

  /**
   * Create a block field.
   *
   * @param $edit
   *   An optional array of field properties.
   */
  function dsCreateBlockField($edit = array()) {

    $edit += array(
      'name' => 'Test block field',
      'field' => 'test_block_field',
      'entities[node]' => '1',
      'block' => 'node|recent',
      'block_render' => DS_BLOCK_TEMPLATE,
    );

    $this->drupalPost('admin/structure/ds/fields/manage_block', $edit, t('Save'));
    $this->assertText(t('The field '. $edit['name'] .' has been saved'), t('!name field has been saved', array('!name' => $edit['name'])));
  }
}

/**
 * Test managing of custom fields.
 */
class dsFieldsTests extends dsBaseTest {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Fields'),
      'description' => t('Tests for managing custom code and block fields.'),
      'group' => t('Display suite'),
    );
  }

  /**
   * Test custom fields.
   */
  function testDSCustomFields() {

    $edit = array(
      'name' => 'Test field',
      'field' => 'test_field',
      'entities[node]' => '1',
      'code[value]' => 'Test field',
      'use_token' => '0',
    );

    $this->dsCreateCodeField($edit);

    // Create the same and assert it already exists.
    $this->drupalPost('admin/structure/ds/fields/manage_custom', $edit, t('Save'));
    $this->assertText(t('The machine-readable name is already in use. It must be unique.'), t('Field testing already exists.'));

    // Assert it's found on the Field UI for article.
    $this->drupalGet('admin/structure/types/manage/article/display');
    $this->assertRaw('fields[test_field][weight]', t('Test field found on node article.'));

    // Assert it's not found on the Field UI for article.
    $this->drupalGet('admin/config/people/accounts/display');
    $this->assertNoRaw('fields[test_field][weight]', t('Test field not found on user.'));

    // Update testing label
    $edit = array(
      'name' => 'Test field 2',
    );
    $this->drupalPost('admin/structure/ds/fields/manage_custom/test_field', $edit, t('Save'));
    $this->assertText(t('The field Test field 2 has been saved'), t('Test field label updated'));

    // Remove a view mode.
    $this->drupalPost('admin/structure/ds/fields/delete/test_field', array(), t('Delete'));
    $this->assertText(t('The field Test field 2 has been deleted'), t('Test field removed'));

    // Assert the view mode is gone at the manage display screen.
    $this->drupalGet('admin/structure/types/manage/article/display');
    $this->assertNoRaw('fields[test_field][weight]', t('Test field field found on node article.'));
  }

  /**
   * Test custom blocks.
   */
  function testDSCustomBlocks() {

    $edit = array(
      'name' => 'Test block field',
      'field' => 'test_block_field',
      'entities[node]' => '1',
      'block' => 'node|recent',
      'block_render' => DS_BLOCK_TEMPLATE,
    );

    $this->dsCreateBlockField($edit);

    // Create the same and assert it already exists.
    $this->drupalPost('admin/structure/ds/fields/manage_block', $edit, t('Save'));
    $this->assertText(t('The machine-readable name is already in use. It must be unique.'), t('Block test field already exists.'));

    // Assert it's found on the Field UI for article.
    $this->drupalGet('admin/structure/types/manage/article/display');
    $this->assertRaw('fields[test_block_field][weight]', t('Test block field found on node article.'));

    // Assert it's not found on the Field UI for article.
    $this->drupalGet('admin/config/people/accounts/display');
    $this->assertNoRaw('fields[test_block_field][weight]', t('Test block field not found on user.'));

    // Update testing label
    $edit = array(
      'name' => 'Test block field 2',
    );
    $this->drupalPost('admin/structure/ds/fields/manage_block/test_block_field', $edit, t('Save'));
    $this->assertText(t('The field Test block field 2 has been saved'), t('Test field label updated'));

    // Remove a view mode.
    $this->drupalPost('admin/structure/ds/fields/delete/test_block_field', array(), t('Delete'));
    $this->assertText(t('The field Test block field 2 has been deleted'), t('Test field removed'));

    // Assert the view mode is gone at the manage display screen.
    $this->drupalGet('admin/structure/types/manage/article/display');
    $this->assertNoRaw('fields[test_block_field][weight]', t('Test block field found on node article.'));
  }

}

/**
 * Test managing of view modes.
 */
class dsViewModesTests extends dsBaseTest {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('View modes'),
      'description' => t('Tests for managing custom view modes.'),
      'group' => t('Display suite'),
    );
  }

  /**
   * Test managing view modes.
   */
  function testDSManageViewModes() {

    $edit = array(
      'name' => 'Testing',
      'view_mode' => 'testing',
      'entities[node]' => '1'
    );

    $this->dsCreateViewMode($edit);

    // Create the same and assert it already exists.
    $this->drupalPost('admin/structure/ds/view_modes/manage', $edit, t('Save'));
    $this->assertText(t('The machine-readable name is already in use. It must be unique.'), t('View mode testing already exists.'));

    // Assert it's found on the Field UI for article.
    $this->drupalGet('admin/structure/types/manage/article/display');
    $this->assertRaw('display_suite[modes][view_modes_custom][testing]', t('Testing view mode found on node article.'));

    // Assert it's not found on the Field UI for article.
    $this->drupalGet('admin/config/people/accounts/display');
    $this->assertNoRaw('display_suite[modes][view_modes_custom][testing]', t('Testing view mode not found on user.'));

    // Update testing label
    $edit = array(
      'name' => 'Testing 2',
    );
    $this->drupalPost('admin/structure/ds/view_modes/manage/testing', $edit, t('Save'));
    $this->assertText(t('The view mode Testing 2 has been saved'), t('Testing label updated'));

    // Remove a view mode.
    $this->drupalPost('admin/structure/ds/view_modes/delete/testing', array(), t('Delete'));
    $this->assertText(t('The view mode Testing 2 has been deleted'), t('Testing view mode removed'));

    // Assert the view mode is gone at the manage display screen.
    $this->drupalGet('admin/structure/types/manage/article/display');
    $this->assertNoRaw('display_suite[modes][view_modes_custom][testing]', t('Testing view mode found on node article.'));
  }
}

/**
 * Test managing of layouts and styles
 */
class dsLayoutsStylesTests extends dsBaseTest {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Layouts'),
      'description' => t('Tests for managing layouts and classes on Field UI screen.'),
      'group' => t('Display suite'),
    );
  }

  /**
   * Test selecting layouts, empty regions, classes and basic fields.
   */
  function testDStestLayouts() {

    $this->dsCreateCodeField();
    $this->dsCreateBlockField();

    $layout = array(
      'display_suite[layout]' => 'ds_2col_stacked',
    );

    $assert = array(
      'regions' => array(
        'header' => '<td colspan="8">' . t('Header') . '</td>',
        'left' => '<td colspan="8">' . t('Left') . '</td>',
        'right' => '<td colspan="8">' . t('Right') . '</td>',
        'footer' => '<td colspan="8">' . t('Footer') . '</td>',
      ),
    );

    $fields = array(
      'fields[post_date][region]' => 'header',
      'fields[author][region]' => 'left',
      'fields[links][region]' => 'left',
      'fields[body][region]' => 'right',
      'fields[comments][region]' => 'footer',
      'fields[test_field][region]' => 'left',
      'fields[test_block_field][region]' => 'left',
    );

    // Setup first layout.
    $this->dsSelectLayout($layout, $assert);
    $this->dsConfigureStyles();
    $this->dsSelectClasses();
    $this->dsConfigureFields($fields);

    // Assert we have some configuration in our database.
    $count = db_query("SELECT COUNT(settings) FROM {ds_layouts} WHERE entity_type = 'node' AND bundle = 'article' AND view_mode = 'default'")->fetchField();
    $this->assertEqual($count, 1, t('1 record found for layout serttings for node article'));

    // Lookup settings and verify.
    $data = unserialize(db_query("SELECT settings FROM {ds_layouts} WHERE entity_type = 'node' AND bundle = 'article' AND view_mode = 'default'")->fetchField());
    $this->assertTrue(in_array('post_date', $data['regions']['header']), t('Post date is in header'));
    $this->assertTrue(in_array('test_field', $data['regions']['left']), t('Test field is in left'));
    $this->assertTrue(in_array('author', $data['regions']['left']), t('Author is in left'));
    $this->assertTrue(in_array('links', $data['regions']['left']), t('Links is in left'));
    $this->assertTrue(in_array('test_block_field', $data['regions']['left']), t('Test block field is in left'));
    $this->assertTrue(in_array('body', $data['regions']['right']), t('Body is in right'));
    $this->assertTrue(in_array('comments', $data['regions']['footer']), t('Comments is in footer'));
    $this->assertTrue(in_array('class_name_1', $data['classes']['header']), t('Class name 1 is in header'));
    $this->assertTrue(empty($data['classes']['left']), t('Left has no classes'));
    $this->assertTrue(empty($data['classes']['right']), t('Right has classes'));
    $this->assertTrue(in_array('class_name_2', $data['classes']['footer']), t('Class name 2 is in header'));

    // Create a article node and verify settings.
    $settings = array(
      'type' => 'article',
    );
    $node = $this->drupalCreateNode($settings);
    $this->drupalGet('node/' . $node->nid);

    // Assert regions.
    $this->assertRaw('group-header', 'Template found (region header)');
    $this->assertRaw('group-header class_name_1', 'Class found (class_name_1)');
    $this->assertRaw('group-left', 'Template found (region left)');
    $this->assertRaw('group-right', 'Template found (region right)');
    $this->assertRaw('group-footer', 'Template found (region footer)');
    $this->assertRaw('group-footer class_name_2', 'Class found (class_name_2)');

    // Assert custom fields.
    $this->assertRaw('field-name-test-field', t('Custom field found'));
    $this->assertRaw('Test field', t('Custom field found'));
    $this->assertRaw('field-name-test-block-field', t('Custom block field found'));
    $this->assertRaw('<h2>Recent content</h2>', t('Custom block field found'));

    // Test empty regions checkbox.
    $fields = array(
      'fields[comments][region]' => 'hidden',
    );
    $this->dsConfigureFields($fields);
    $this->drupalGet('node/' . $node->nid);
    $this->assertRaw('group-footer', 'Template found (region footer)');
    $hide = array(
      'display_suite[hide_empty_regions]' => '1',
    );

    $this->dsConfigureFields($hide);
    $this->drupalGet('node/' . $node->nid);
    $this->assertNoRaw('group-footer', 'Template found (region footer)');
  }
}
