<?php
// $Id$

/**
 * Core functions for the Display Suite module.
 */


/**
 * Constants for field types.
 */
define('DS_FIELD_TYPE_THEME', 1);
define('DS_FIELD_TYPE_FUNCTION', 2);
define('DS_FIELD_TYPE_PREPROCESS', 3);
define('DS_FIELD_TYPE_IGNORE', 4);
define('DS_FIELD_TYPE_CODE', 5);
define('DS_FIELD_TYPE_BLOCK', 6);

/**
 * Constants for field statuses.
 */
define('DS_FIELD_STATUS_STATIC', 1);
define('DS_FIELD_STATUS_DEFAULT', 2);
define('DS_FIELD_STATUS_CUSTOM', 3);
define('DS_FIELD_STATUS_OVERRIDDEN', 4);

/**
 * Implements hook_theme().
 */
function ds_theme() {
  module_load_include('inc', 'ds', 'includes/ds.registry');
  return _ds_theme();
}

/**
 * Load our own entity implementatios for fields, registry etc.
 */
function ds_load_entity_implementations() {
  static $loaded = FALSE;

  if (!$loaded) {
    $loaded = TRUE;
    require_once('entities/node/node.inc');
  }
}

/**
 * API function to get fields.
 *
 * @param $entity_type
 *   The name of the entity.
 * @param $bundle
 *   The name of bundle (ie, page or story for node types, profile for users)
 * @param $view_mode
 *   The name of view mode.
 * @param $reset
 *   Whether we need to reset the fields cache or not.
 * @param $cache
 *   Whether we need to cache the the fields or not.
 * @return
 *   Collection of fields.
 */
function ds_get_fields($entity_type, $bundle, $view_mode, $reset = FALSE, $cache = TRUE) {

  static $static_fields = array();
  if (!isset($static_fields[$entity_type][$bundle][$view_mode])) {

    // Do we have them cached or not ? // TODO Get this from cache instead of variable
    // This takes a few iterations of a site before everything will be in it,
    $ds_fields_cached = variable_get('ds_fields_cached', array());
    if (!isset($ds_fields_cached[$entity_type][$bundle][$view_mode]) || $reset) {

      // Load our own entity implementations // TODO enable or disable our own entities implementations ?
      ds_load_entity_implementations();

      // Fields in code.
      $fields = array();
      foreach (module_implements('ds_fields') as $module) {
        $function = $module .'_ds_fields';
        $all_fields = $function($entity_type, $bundle, $view_mode);
        if (!empty($all_fields)) {
          foreach ($all_fields as $key => $field_results) {
            if ($key === $entity_type) {
              $fields = array_merge($field_results, $fields);
              /*foreach ($fields as $key => $field) {
                $exclude = (isset($field['exclude'][$type_name]) && $field['exclude'][$type_name] === $type_name) ? TRUE : FALSE;
                if ($exclude) {
                  unset($fields[$key]);
                }
              }*/
            }
          }
        }
      }

      // Give modules a change to alter fields.
      drupal_alter('ds_fields', $fields);

      // If we reset, remove the old settings, otherwhise, save the new ones.
      if ($reset) {
        unset($ds_fields_cached[$entity_type][$bundle][$view_mode]);
      }
      else {
        $ds_fields_cached[$entity_type][$bundle][$view_mode] = $fields;
      }
      // Do we cache or not ?
      if ($cache) {
        //variable_set('ds_fields_cached', $ds_fields_cached);
      }
    }
    else {
      $fields = $ds_fields_cached[$entity_type][$bundle][$view_mode];
    }

    // Store the fields.
    $static_fields[$entity_type][$bundle][$view_mode] = $fields;
  }

  return $static_fields[$entity_type][$bundle][$view_mode];
}

/**
 * Get the value for a Display Suite field.
 *
 * @param $key
 *   The key of the field.
 * @param $field
 *   The configuration of a DS field.
 * @param $entity
 *   The current entity.
 * @param $entity_type
 *   The name of the entity.
 * @param $bundle
 *   The name of the bundle.
 * @param $view_mode
 *   The name of the view mode.
 * @return $markup
 *   The markup of the field used for output.
 */
function ds_get_field_value($key, $field, $entity, $entity_type, $bundle, $view_mode) {

  $field['entity'] = $entity;

  switch ($field['type']) {
    case DS_FIELD_TYPE_PREPROCESS:
    case DS_FIELD_TYPE_IGNORE:
      if (isset($field['properties']['key']) && !empty($field['properties']['key'])) {
        $ds_preprocess_fields[$key] = array('type' => $field['type'], 'key' => $field['properties']['key']);
      }
      else {
        $ds_preprocess_fields[$key] = $field['type'];
      }
      break;

    case DS_FIELD_TYPE_CODE:
      $format = (isset($field_settings[$key]['format'])) ? $field_settings[$key]['format'] : 'ds_eval_code';
      $field['formatter'] = $format;
      return theme($format, $field);

    case DS_FIELD_TYPE_BLOCK:
      return theme('ds_eval_block', $field);

    case DS_FIELD_TYPE_FUNCTION:
      if (isset($field['file'])) {
        include_once($field['file']);
      }
      $function = (isset($field_settings[$key]['format'])) ? $field_settings[$key]['format'] : key($field['properties']['formatters']);
      return $function($field);

    case DS_FIELD_TYPE_THEME:
      $format = (isset($field_settings[$key]['format'])) ? $field_settings[$key]['format'] : key($field['properties']['formatters']);
      $field['formatter'] = $format;
      return theme($format, $field);
      break;
  }
}

/**
 * Get the configuration for field settings.
 *
 * @param $entity_type
 *   The name of the entity.
 * @param $bundle
 *   The name of bundle (ie, page or story for node types, profile for users)
 * @param $view_mode
 *   The name of view mode.
 */
function ds_get_fields_configuration($entity_type, $bundle, $view_mode) {
  static $fields_configuration = NULL;

  if (!isset($fields_configuration)) {
    if ($cache = cache_get('ds_fields_configuration')) {
      $fields_configuration = $cache->data;
    }
    else {
      $result = db_query('SELECT field, entity_type, bundle, view_mode, settings FROM {display_suite}');
      foreach ($result as $row) {
        $fields_configuration[$row->entity_type][$row->bundle][$row->view_mode][$row->field] = unserialize($row->settings);
      }
      cache_set('ds_fields_configuration', $fields_configuration);
    }
  }

  return (isset($fields_configuration[$entity_type][$bundle][$view_mode])) ? $fields_configuration[$entity_type][$bundle][$view_mode] : array();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'ds', 'includes/ds.display');
  ds_extend_manage_display_table($form, $form_state);
}

/**
 * Save the region and field settings from the 'Manage display' screen.
 */
function ds_form_field_ui_display_overview_form_alter_submit($form, &$form_state) {
  module_load_include('inc', 'ds', 'includes/ds.display');
  ds_extend_manage_display_table_submit($form, $form_state);
}

/**
 * Implements hook_field_attach_view_alter().
 */
function ds_field_attach_view_alter(&$output, $context) {
  $entity_type = $output['#entity_type'];
  $bundle = $output['#bundle'];
  $view_mode = $context['view_mode'];
  $entity = $context['entity'];
  ds_render_content($output, $entity_type, $bundle, $view_mode, $entity);
}

/**
 * Render content of an entity.
 * TODO A LOT :)
 */
function ds_render_content(&$output, $entity_type, $bundle, $view_mode, $entity) {
  $weight = 5;
  $i = 0;
  $field_values = ds_get_fields_configuration($entity_type, $bundle, $view_mode);
  $fields = ds_get_fields($entity_type, $bundle, $view_mode);
  foreach ($fields as $key => $field) {

    // TODO check for default
    $field['formatter'] = isset($field_values[$key]['format']) ? $field_values[$key]['format'] : 'default';
    $field_value = ds_get_field_value($key, $field, $entity, $entity_type, $bundle, $view_mode);

    $output[$key] = array(
      '#theme' => 'field',
      '#field_type' => 'ds',
      '#title' => $field['title'],
      '#weight' => isset($field_values[$key]['weight']) ? $field_values[$key]['weight'] : 0,
      '#label_display' => isset($field_values[$key]['label']) ? $field_values[$key]['label'] : 'inline',
      '#field_name' => $key,
      '#bundle' => $bundle,
      '#entity_type' => $entity_type,
      '#access' => TRUE,
      '#items' => array(
        0 => array(
          'value' => $field_value,
        ),
      ),
      0 => array(
        '#markup' => $field_value,
      ),
    );
  }
}

