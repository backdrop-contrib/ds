<?php
// $Id$

/**
 * @file
 * Display Suite extras.
 */

/**
 * Implements hook_module_implements_alter().
 */
function ds_extras_module_implements_alter(&$implementations, $hook) {

  // Because it's possible to turn on/off features for display suite.
  // we'll unset hooks here if necessary which otherwhise do nothing at all.

  // Disable the region to block feature.
  $region_hooks = array(
    'ds_layout_region_alter',
    'field_attach_view_alter',
    'block_info',
    'block_view'
  );
  if (!variable_get('ds_extras_region_to_block', FALSE) && in_array($hook, $region_hooks)) {
    unset($implementations['ds_extras']);
  }

  // Disable the switch view mode feature.
  $switch_hooks = array(
    'menu_alter',
    'permission',
    'form_node_form_alter',
  );
  if (!variable_get('ds_extras_switch_view_mode', FALSE) && in_array($hook, $switch_hooks)) {
    unset($implementations['ds_extras']);
  }
}

/**
 * Implements hook_menu().
 */
function ds_extras_menu() {
  $items = array();

  $items['admin/structure/ds/extras'] = array(
    'title' => 'Extras',
    'description' => 'Configure extra functionality for Display Suite',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ds_extras_settings'),
    'access arguments' => array('admin_display_suite'),
  );

  return $items;
}

/**
 * Menu callback: Display Suite extras settings.
 */
function ds_extras_settings($form) {

  $form['switch'] = array(
    '#type' => 'fieldset',
    '#title' => t('Switch view modes'),
  );

  $form['switch']['ds_extras_switch_view_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#description' => t('Toggle this checkbox to enable the "Switch view mode" functionality. With this feature, you can change the view mode on a per node basis. A new tab on the node edit form will appear called "Display settings."'),
    '#default_value' => variable_get('ds_extras_switch_view_mode', FALSE),
  );

  $form['region'] = array(
    '#type' => 'fieldset',
    '#title' => t('Block regions'),
  );

  $form['region']['ds_extras_region_to_block'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#description' => t('Toggle this checkbox to enable the "Regions to block" functionality. With this feature, a new region called "Block" will be added to the "Manage display" screens which contents will be rendered in a block. The block is called "Region to block" on the blocks overview page.'),
    '#default_value' => variable_get('ds_extras_region_to_block', FALSE),
  );

  $form = system_settings_form($form);
  $form['#submit'][] = 'ds_extras_settings_submit';
  return $form;
}

/**
 * Submit callback: Extras settings screen.
 */
function ds_extras_settings_submit($form, &$form_state) {
  // Clear module_implements cache and rebuild menu.
  cache_clear_all('module_implements', 'cache_bootstrap');
  menu_rebuild();
}

/**
 * Implements hook_permission().
 */
function ds_extras_permission() {

  $permissions = array();
  foreach (node_type_get_names() as $key => $name) {
    $permissions['ds_switch ' . $key] = array(
      'title' => t('Switch view modes on :type', array(':type' => $name))
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu_alter().
 */
function ds_extras_menu_alter(&$items) {
  // Use a custom callback for node/% to set the overriden view mode.
  $items['node/%node']['page callback'] = 'ds_extras_node_show';
}

/**
 * View an individual node.
 */
function ds_extras_node_show($node, $message = NULL) {
  if ($message) {
    drupal_set_title(t('Revision of %title from %date', array('%title' => $node->title, '%date' => format_date($node->revision_timestamp))), PASS_THROUGH);
  }

  // If there is a menu link to this node, the link becomes the last part
  // of the active trail, and the link name becomes the page title.
  // Thus, we must explicitly set the page title to be the node title.
  drupal_set_title($node->title);
  $uri = entity_uri('node', $node);
  // Set the node path as the canonical URL to prevent duplicate content.
  drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);
  // Set the non-aliased path as a default shortlink.
  drupal_add_html_head_link(array('rel' => 'shortlink', 'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))), TRUE);

  // Update the history table, stating that this user viewed this node.
  node_tag_new($node);

  // For markup consistency with other pages, use node_view_multiple() rather than node_view().
  $view_mode = (!empty($node->ds_switch)) ? $node->ds_switch : 'full';
  return node_view_multiple(array($node->nid => $node), $view_mode);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_extras_form_node_form_alter(&$form, $form_state, $form_id) {

  if (user_access('ds_switch ' . $form['#node']->type)) {

    $view_mode_settings = field_view_mode_settings('node', $form['#node']->type);

    // Get the view modes.
    $options = array('' => t('Default'));
    $ds_vm = ds_entity_view_modes('node');
    foreach ($ds_vm as $key => $item) {
      $overriden = (!empty($view_mode_settings[$key]['custom_settings']) ? TRUE : FALSE);
      if ($overriden) {
        $options[$key] = $item['label'];
      }
    }

    // Only fire if we have more than 1 option.
    if (count($options) > 1) {
      $node = $form['#node'];
      $form['ds_switch'] = array(
        '#type' => 'fieldset',
        '#title' => t('Display settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'additional_settings',
        '#weight' => 100,
      );

      $form['ds_switch']['ds_switch'] = array(
        '#type' => 'select',
        '#title' => t('View mode'),
        '#options' => $options,
        '#default_value' => isset($node->ds_switch) ? $node->ds_switch : '',
        '#description' => t('Switch to a different view mode to display the default full page view of this node.'),
        '#weight' => -1,
      );
    }
  }
}

/**
 * Implements hook_block_info().
 */
function ds_extras_block_info() {
  $blocks['ds_extras'] = array(
    'info' => 'Region to block',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ds_extras_block_view($delta = '') {
  $data = drupal_static('ds_block_region');

  if (!empty($data)) {
    $block = array();
    $block['subject'] = t('Region to block');
    $block['content'] = $data;
    return $block;
  }
}

/**
 * Implements hook_ds_layout_region_alter().
 */
function ds_extras_ds_layout_region_alter(&$region_options, &$regions) {
  $region_options['block'] = t('Block');
  $regions['block'] = array(
    'title' => t('Block'),
    'message' => t('No fields are displayed in this region'),
  );
}

/**
 * Implements hook_field_attach_view_alter().
 */
function ds_extras_field_attach_view_alter(&$build, $context) {
  $block_data = &drupal_static('ds_block_region');
  $entity_type = $build['#entity_type'];
  $bundle = $build['#bundle'];
  $view_mode = $context['view_mode'];
  if ($layout = ds_determine_layout_variables($entity_type, $bundle, $view_mode)) {
    if (isset($layout['settings']['regions']['block']) && !empty($layout['settings']['regions']['block'])) {
      foreach ($layout['settings']['regions']['block'] as $key => $field) {
        $block_data[] = $build[$field];
        unset($build[$field]);
      }
    }
  }
}
