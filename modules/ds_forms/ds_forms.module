<?php

/**
 * @file
 * Display Suite forms integration.
 */

/**
 * Implements hook_theme().
 */
function ds_forms_theme() {
  $theme_functions = array();

  // Node form theme function registration.
  $theme_functions['node_form'] = array(
    'render element' => 'form',
  );

  return $theme_functions;
}

/**
 * Implements hook_ds_layout_info().
 */
function ds_forms_ds_layout_info() {
  $path = drupal_get_path('module', 'ds_forms');

  $layouts = array(
    'ds_form' => array(
      'label' => t('Form 2 column stacked'),
      'path' => $path . '/layouts/ds_form',
      'regions' => array(
        'header' => t('Header'),
        'left' => t('Left'),
        'right' => t('Right'),
        'footer' => t('Footer')
      ),
      'css' => TRUE,
      'form' => TRUE,
    ),
  );

  return $layouts;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_forms_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  // We currently only work on node forms.
  if ($form['#entity_type'] == 'node') {

    // Add necessary variables.
    $form['#view_mode'] = 'form';
    $form_state['no_view_mode_suggestions'] = TRUE;

    // Attach js.
    $form['#attached']['js'][] = drupal_get_path('module', 'ds_forms') . '/ds_forms.admin.js';

    // Load Display suite.
    form_load_include($form_state, 'inc', 'ds', 'ds.field_ui');
    ds_field_ui_fields_layouts($form, $form_state);
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function ds_forms_field_extra_fields() {
  $extra = array();

  if (module_exists('translation')) {
    $extra['node']['article']['form']['language'] = array(
      'label' => 'Language',
      'weight' => 0,
    );
  }

  return $extra;
}

/**
 * Node form template preprocess function.
 */
function ds_forms_preprocess_node_form(&$vars) {
  $entity_type = 'node';
  $bundle = $vars['form']['#node']->type;
  $view_mode = 'form';
  if ($layout = ds_get_layout($entity_type, $bundle, $view_mode, FALSE)) {

    // Hide empty regions variable.
    $hide_empty_regions = $layout['settings']['hide_empty_regions'];

    // Theme hook suggestions.
    $vars['theme_hook_suggestions'][] = $layout['layout'];
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $entity_type;
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $entity_type . '_' . $bundle;

    // Add path to css file.
    if (isset($layout['css'])) {
      drupal_add_css($layout['path'] . '/' . $layout['layout'] . '.css');
    }

    // Add the hidden region.
    $layout['regions']['hidden'] = 'Hidden';

    // Create region variables based on the layout settings.
    foreach ($layout['regions'] as $region_name => $region) {

      // Create the region content.
      if ($region_name == 'hidden') {
        ds_forms_render_region($vars['form'], $region_name, $layout);
      }
      else {
        $vars[$region_name] = ds_forms_render_region($vars['form'], $region_name, $layout);

        // Hide empty regions.
        if ($hide_empty_regions && empty($vars[$region_name]) && empty($layout['flexible'])) {
          $vars[$region_name] = FALSE;
        }
        elseif (empty($vars[$region_name])) {
          $vars[$region_name] = '&nbsp;';
        }
      }

      // Add extras classes to the region.
      $vars[$region_name . '_classes'] = !empty($layout['settings']['classes'][$region_name]) ? ' ' . implode(' ', $layout['settings']['classes'][$region_name]) : '';
    }
  }
}

/**
 * Render a form region.
 *
 * @param $content
 *   An array of content fields.
 * @param $region
 *   The name of region to render.
 * @param $layout
 *   The layout definition.
 */
function ds_forms_render_region(&$content, $region, $layout) {
  $output = '';

  if (isset($layout['settings']['regions'][$region])) {
    foreach ($layout['settings']['regions'][$region] as $key => $field) {
      if ($region == 'hidden') {
        $content[$field]['#access'] = FALSE;
      }
      else {
        $output .= render($content[$field]);
        hide($content[$field]);
      }
    }
  }
  return $output;
}
