<?php

/**
 * @file
 * Display Suite forms integration.
 */

/**
 * Implements hook_menu().
 */
function ds_forms_menu() {
  $items = array();

  $items['admin/structure/ds/forms'] = array(
    'title' => 'Forms',
    'description' => 'Displays a list of forms which can be styled.',
    'page callback' => 'ds_forms_list',
    'access arguments' => array('admin_display_suite'),
    'file' => 'ds_forms.admin.inc',
  );

  $items['admin/structure/ds/forms/manage/%ds_form'] = array(
    'title' => 'Manage form',
    'description' => 'Manage a custom form with Display suite',
    'page callback' => 'ds_forms_manage_custom',
    'page arguments' => array(5),
    'access arguments' => array('admin_display_suite'),
    'file' => 'ds_forms.admin.inc',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

/**
 * Implements hook_ds_forms_info().
 */
function ds_forms_ds_forms_info() {
  module_load_include('inc', 'ds_forms', 'ds_forms.admin');
  return _ds_forms_ds_forms_info();
}

/**
 * Implements hook_theme().
 */
function ds_forms_theme() {
  $theme_functions = array();

  $theme_functions['ds_forms_custom_form'] = array(
    'render element' => 'form',
  );

  return $theme_functions;
}

/**
 * Implements hook_ds_layout_info().
 */
function ds_forms_ds_layout_info() {
  $path = drupal_get_path('module', 'ds_forms');

  $layouts = array(
    'ds_form' => array(
      'label' => t('2 column stacked'),
      'path' => $path . '/layouts/ds_form',
      'regions' => array(
        'header' => t('Header'),
        'left' => t('Left'),
        'right' => t('Right'),
        'footer' => t('Footer')
      ),
      'css' => TRUE,
      'form' => TRUE,
    ),
  );

  return $layouts;
}

/**
 * Implements hook_entity_info().
 */
function ds_forms_entity_info() {

  // Register the custom forms.
  $bundles = $entity_info = array();
  $forms = ds_forms_get_forms();
  foreach ($forms as $form_id => $data) {
    if ($data['entity_type'] == 'ds_forms') {
      $bundles[$form_id] = array(
        'label' => check_plain($data['label']),
        'admin' => array('path' => 'admin/structure/ds/forms/manage/' . $form_id),
        'fieldable' => FALSE,
      );
    }
  }

  if (!empty($bundles)) {
    $entity_info['ds_forms'] = array(
      'label' => t('Display suite forms'),
      'bundles' => $bundles,
      'ds_form' => TRUE,
    );
    return $entity_info;
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function ds_forms_field_extra_fields() {
  $extra = array();

  // Register extra fields for forms.
  $forms = ds_forms_get_forms();
  foreach ($forms as $form_id => $data) {
    if (isset($data['elements'])) {
      foreach ($data['elements'] as $key => $label) {
        $bundle = isset($data['bundle']) ? $data['bundle'] : $form_id;
        $extra[$data['entity_type']][$bundle]['form'][$key] = array(
          'label' => $label,
          'weight' => 0,
        );
      }
    }
  }

  return $extra;
}

/**
 * Form load function.
 */
function ds_form_load($form_id) {
  $forms = ds_forms_get_forms();
  if (isset($forms[$form_id])) {
    $return = $forms[$form_id];
    $return['form_id'] = $form_id;
    return $return;
  }
  return FALSE;
}

/**
 * Get the registered forms.
 *
 * @param $reset
 *   Whether to reset the internal and database cache.
 */
function ds_forms_get_forms($reset = FALSE) {
  static $forms = NULL;

  if (!isset($forms)) {
    if (!$reset && $cache = cache_get('ds_forms')) {
      $forms = $cache->data;
    }
    else {
      $forms = module_invoke_all('ds_forms_info');
      cache_set('ds_forms', $forms, 'cache');
    }
  }

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_forms_form_field_ui_field_overview_form_alter(&$form, &$form_state) {

  // We currently only work on node forms or custom forms.
  if ($form['#entity_type'] == 'node' || $form['#entity_type'] == 'ds_forms') {

    // Add necessary variables.
    $form['#view_mode'] = 'form';
    $form_state['no_view_mode_suggestions'] = TRUE;

    // Attach js.
    $form['#attached']['js'][] = drupal_get_path('module', 'ds_forms') . '/ds_forms.admin.js';

    // Load Display suite.
    form_load_include($form_state, 'inc', 'ds', 'ds.field_ui');
    ds_field_ui_fields_layouts($form, $form_state);

    if (!module_exists('field_group')) {

      $form['#attached']['css'][] = drupal_get_path('module', 'ds_forms') . '/ds_forms.admin.css';

      // Add AJAX wrapper.
      $form['fields']['#prefix'] = '<div id="field-display-overview-wrapper">';
      $form['fields']['#suffix'] = '</div>';

      $form['refresh_rows'] = array('#type' => 'hidden');
      $form['refresh'] = array(
        '#type' => 'submit',
        '#value' => t('Refresh'),
        '#op' => 'refresh_table',
        '#submit' => array('field_ui_display_overview_multistep_submit'),
        '#ajax' => array(
          'callback' => 'field_ui_display_overview_multistep_js',
          'wrapper' => 'field-display-overview-wrapper',
          'effect' => 'fade',
          // The button stays hidden, so we hide the AJAX spinner too. Ad-hoc
          // spinners will be added manually by the client-side script.
          'progress' => 'none',
        ),
      );
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function ds_forms_form_alter(&$form, &$form_state, $form_id) {

  if ($ds_form = ds_form_load($form_id)) {
    // Check if we have a layout. We will than add
    // the theming function and add the layout as a class.
    $bundle = isset($ds_form['bundle']) ? $ds_form['bundle'] : $form_id;
    if ($layout = ds_get_layout($ds_form['entity_type'], $bundle, 'form', FALSE)) {
      $form['#theme'][] = 'ds_forms_custom_form';
      $form['#attributes']['class'][] = strtr($layout['layout'], '_', '-');
    }
  }
}

/**
 * Implements hook_preprocess_ds_forms_custom_form().
 */
function ds_forms_preprocess_ds_forms_custom_form(&$vars) {
  $ds_form = ds_form_load($vars['form']['#form_id']);
  $entity_type = $ds_form['entity_type'];
  $bundle = isset($ds_form['bundle']) ? $ds_form['bundle'] : $vars['form']['#form_id'];

  if ($layout = ds_get_layout($entity_type, $bundle, 'form', FALSE)) {

    // Hide empty regions variable.
    $hide_empty_regions = $layout['settings']['hide_empty_regions'];

    // Theme hook suggestions.
    $vars['theme_hook_suggestions'][] = $layout['layout'];
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $entity_type;
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $entity_type . '_' . $bundle;

    $form = &$vars['form'];

    // Add path to css file.
    if (isset($layout['css'])) {
      drupal_add_css($layout['path'] . '/' . $layout['layout'] . '.css');
    }

    // Add the hidden region.
    $layout['regions']['hidden'] = 'Hidden';

    // Create region variables based on the layout settings.
    foreach ($layout['regions'] as $region_name => $region) {

      // Create the region content.
      if ($region_name == 'hidden') {
        ds_forms_render_region($form, $region_name, $layout);
      }
      else {
        $vars[$region_name] = ds_forms_render_region($form, $region_name, $layout);

        // Hide empty regions.
        if ($hide_empty_regions && empty($vars[$region_name]) && empty($layout['flexible'])) {
          $vars[$region_name] = FALSE;
        }
        elseif (empty($vars[$region_name])) {
          $vars[$region_name] = '&nbsp;';
        }
      }

      // Add extras classes to the region.
      $vars[$region_name . '_classes'] = !empty($layout['settings']['classes'][$region_name]) ? ' ' . implode(' ', $layout['settings']['classes'][$region_name]) : '';
    }
  }
}

/**
 * Render a form region.
 *
 * @param $content
 *   An array of content fields.
 * @param $region
 *   The name of region to render.
 * @param $layout
 *   The layout definition.
 */
function ds_forms_render_region(&$content, $region, $layout) {
  $output = '';

  if (isset($layout['settings']['regions'][$region])) {
    foreach ($layout['settings']['regions'][$region] as $key => $field) {
      if ($region == 'hidden') {
        $content[$field]['#access'] = FALSE;
      }
      else {
        $output .= drupal_render($content[$field]);
      }
    }
  }
  return $output;
}
