<?php

/**
 * @file
 * Display Suite forms integration.
 */

/**
 * Implements hook_theme().
 */
function ds_forms_theme() {
  $theme_functions = array();

  // Node form theme function registration.
  $theme_functions['node_form'] = array(
    'render element' => 'form',
  );

  return $theme_functions;
}

/**
 * Implements hook_ds_layout_info().
 */
function ds_forms_ds_layout_info() {
  $path = drupal_get_path('module', 'ds_forms');

  $layouts = array(
    'ds_form' => array(
      'label' => t('2 column stacked'),
      'path' => $path . '/layouts/ds_form',
      'regions' => array(
        'header' => t('Header'),
        'left' => t('Left'),
        'right' => t('Right'),
        'footer' => t('Footer')
      ),
      'css' => TRUE,
      'form' => TRUE,
    ),
  );

  return $layouts;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_forms_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  // We currently only work on node forms.
  if ($form['#entity_type'] == 'node') {

    // Add necessary variables.
    $form['#view_mode'] = 'form';
    $form_state['no_view_mode_suggestions'] = TRUE;

    // Attach js.
    $form['#attached']['js'][] = drupal_get_path('module', 'ds_forms') . '/ds_forms.admin.js';

    // Load Display suite.
    form_load_include($form_state, 'inc', 'ds', 'ds.field_ui');
    ds_field_ui_fields_layouts($form, $form_state);
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function ds_forms_field_extra_fields() {
  $extra = array();
  module_load_include('inc', 'node', 'node.pages');

  foreach (node_type_get_types() as $type) {
    $extra['node'][$type->type] = array(
      'form' => array(
        'actions' => array(
          'label' => t('Actions'),
          'weight' => -5,
        ),
        'additional_settings' => array(
          'label' => t('Additional settings'),
          'weight' => -6,
        ),
      ),
    );

    // @todo not every node type is translatable.
    if (module_exists('translation')) {
      $extra['node'][$type->type]['form']['language'] = array(
        'label' => t('Language'),
        'weight' => 0,
      );
    }

    // This is relative resource full one, but it only happens
    // during form building on Field ui, so we should be save.
    // This will find out all fields which are nested into
    // vertical tabs and make them available to drag them around.
    global $user;
    $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type->type, 'language' => LANGUAGE_NONE, 'ds_forms_extra' => TRUE);
    $form = drupal_get_form($type->type . '_node_form', $node);
    $additional_fields = ds_forms_find_additional_fields($form, 'node');
    foreach ($additional_fields as $key => $label) {
      if (isset($form[$key])) {
        $extra['node'][$type->type]['form'][$key] = array(
          'label' => t($label),
          'weight' => 0,
        );
      }
    }
  }

  return $extra;
}

/**
 * Implements hook_form_alter().
 */
function ds_forms_form_alter(&$form, &$form_state, $form_id) {

  // Only act on node forms and in case the hook_field_extra_fields() is not running.
  if (isset($form['#node_edit_form']) && !isset($form['#node']->ds_forms_extra)) {

    $entity_type = 'node';
    $bundle = $form['#node']->type;
    $view_mode = 'form';
    if ($layout = ds_get_layout($entity_type, $bundle, $view_mode, FALSE)) {

      // We need to check earlier than preprocess to move any fields which
      // could be nested into a vertical tab out of there.
      $additional_fields = ds_forms_get_additional_fields($entity_type, $bundle);
      foreach ($additional_fields as $key => $value) {
        if (isset($layout['settings']['fields'][$key]) && $layout['settings']['fields'][$key] != 'hidden' && isset($form[$key])) {
          unset($form[$key]['#group']);
        }
      }
    }
  }
}

/**
 * Node form template preprocess function.
 */
function ds_forms_preprocess_node_form(&$vars) {
  $entity_type = 'node';
  $bundle = $vars['form']['#node']->type;
  $view_mode = 'form';

  if ($layout = ds_get_layout($entity_type, $bundle, $view_mode, FALSE)) {

  $additional_fields = ds_forms_get_additional_fields($entity_type, $bundle);

    // Hide empty regions variable.
    $hide_empty_regions = $layout['settings']['hide_empty_regions'];

    // Theme hook suggestions.
    $vars['theme_hook_suggestions'][] = $layout['layout'];
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $entity_type;
    $vars['theme_hook_suggestions'][] = $layout['layout'] . '__' . $entity_type . '_' . $bundle;

    $form = &$vars['form'];

    // Add path to css file.
    if (isset($layout['css'])) {
      drupal_add_css($layout['path'] . '/' . $layout['layout'] . '.css');
    }

    // Add the hidden region.
    $layout['regions']['hidden'] = 'Hidden';

    // Create region variables based on the layout settings.
    foreach ($layout['regions'] as $region_name => $region) {

      // Create the region content.
      if ($region_name == 'hidden') {
        ds_forms_render_region($form, $region_name, $layout, $additional_fields);
      }
      else {
        $vars[$region_name] = ds_forms_render_region($form, $region_name, $layout, $additional_fields);

        // Hide empty regions.
        if ($hide_empty_regions && empty($vars[$region_name]) && empty($layout['flexible'])) {
          $vars[$region_name] = FALSE;
        }
        elseif (empty($vars[$region_name])) {
          $vars[$region_name] = '&nbsp;';
        }
      }

      // Add extras classes to the region.
      $vars[$region_name . '_classes'] = !empty($layout['settings']['classes'][$region_name]) ? ' ' . implode(' ', $layout['settings']['classes'][$region_name]) : '';
    }
  }
}

/**
 * Render a form region.
 *
 * @param $content
 *   An array of content fields.
 * @param $region
 *   The name of region to render.
 * @param $layout
 *   The layout definition.
 * @param $additional_fields
 *   A collection of addtional fields which reside in the vertical tab
 */
function ds_forms_render_region(&$content, $region, $layout, $additional_fields) {
  $output = '';

  if (isset($layout['settings']['regions'][$region])) {
    foreach ($layout['settings']['regions'][$region] as $key => $field) {
      if ($region == 'hidden') {
        // If it's a field that's an additional setting, access
        // is handled by that field itself.
        if (!isset($additional_fields[$field])) {
          $content[$field]['#access'] = FALSE;
        }
      }
      else {
        if (isset($additional_fields[$field])) {
          // Remove the fieldset collapsed options.
          // TODO make this configurable.
          $content[$field]['#attributes']['class'] = array();
        }
        $output .= drupal_render($content[$field]);
      }
    }
  }
  return $output;
}

/**
 * Get the additional fields for an entity type which can be found in vertical tabs.
 *
 * @param $entity_type
 *   The name of the entity.
 */
function ds_forms_get_additional_fields($entity_type, $bundle) {
  static $additional_fields = array();

  if (!isset($additional_fields[$entity_type][$bundle])) {

    // Register so we don't come in here twice.
    $additional_fields[$entity_type][$bundle] = array();

    $key = 'ds_forms_additional_' . $entity_type;
    $fields = variable_get($key, array());
    $additional_fields[$entity_type][$bundle] = $fields[$bundle];
  }

  return $additional_fields[$entity_type][$bundle];
}

/**
 * Inspect a form build for any children in the additional settings tab.
 *
 * @param $form
 *   The form to inspect.
 * @param $entity_type
 *   The name of the entity.
 */
function ds_forms_find_additional_fields($form, $entity_type) {
  $fields = array();

  return $fields;
}
